package com.yumore.utility.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.yumore.utility.module.PackageEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PACKAGE_ENTITY".
 */
public class PackageEntityDao extends AbstractDao<PackageEntity, Long> {

    public static final String TABLENAME = "PACKAGE_ENTITY";

    public PackageEntityDao(DaoConfig config) {
        super(config);
    }


    public PackageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKAGE_ENTITY\" (" + //
            "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
            "\"PACKAGE_NAME\" TEXT," + // 1: packageName
            "\"APP_NAME\" TEXT," + // 2: appName
            "\"VERSION_CODE\" INTEGER NOT NULL ," + // 3: versionCode
            "\"VERSION_NAME\" TEXT," + // 4: versionName
            "\"WIFI_RX\" INTEGER NOT NULL ," + // 5: wifiRx
            "\"WIFI_TX\" INTEGER NOT NULL ," + // 6: wifiTx
            "\"WIFI_TOTAL\" INTEGER NOT NULL ," + // 7: wifiTotal
            "\"MOBILE_RX\" INTEGER NOT NULL ," + // 8: mobileRx
            "\"MOBILE_TX\" INTEGER NOT NULL ," + // 9: mobileTx
            "\"MOBILE_TOTAL\" INTEGER NOT NULL ," + // 10: mobileTotal
            "\"UID\" INTEGER NOT NULL ," + // 11: uid
            "\"OVERLAY\" INTEGER NOT NULL ," + // 12: overlay
            "\"BITMAPS\" BLOB);"); // 13: bitmaps
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PackageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }

        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
        stmt.bindLong(4, entity.getVersionCode());

        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(5, versionName);
        }
        stmt.bindLong(6, entity.getWifiRx());
        stmt.bindLong(7, entity.getWifiTx());
        stmt.bindLong(8, entity.getWifiTotal());
        stmt.bindLong(9, entity.getMobileRx());
        stmt.bindLong(10, entity.getMobileTx());
        stmt.bindLong(11, entity.getMobileTotal());
        stmt.bindLong(12, entity.getUid());
        stmt.bindLong(13, entity.getOverlay() ? 1L : 0L);

        byte[] bitmaps = entity.getBitmaps();
        if (bitmaps != null) {
            stmt.bindBlob(14, bitmaps);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PackageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }

        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
        stmt.bindLong(4, entity.getVersionCode());

        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(5, versionName);
        }
        stmt.bindLong(6, entity.getWifiRx());
        stmt.bindLong(7, entity.getWifiTx());
        stmt.bindLong(8, entity.getWifiTotal());
        stmt.bindLong(9, entity.getMobileRx());
        stmt.bindLong(10, entity.getMobileTx());
        stmt.bindLong(11, entity.getMobileTotal());
        stmt.bindLong(12, entity.getUid());
        stmt.bindLong(13, entity.getOverlay() ? 1L : 0L);

        byte[] bitmaps = entity.getBitmaps();
        if (bitmaps != null) {
            stmt.bindBlob(14, bitmaps);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public void readEntity(Cursor cursor, PackageEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersionCode(cursor.getInt(offset + 3));
        entity.setVersionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWifiRx(cursor.getLong(offset + 5));
        entity.setWifiTx(cursor.getLong(offset + 6));
        entity.setWifiTotal(cursor.getLong(offset + 7));
        entity.setMobileRx(cursor.getLong(offset + 8));
        entity.setMobileTx(cursor.getLong(offset + 9));
        entity.setMobileTotal(cursor.getLong(offset + 10));
        entity.setUid(cursor.getInt(offset + 11));
        entity.setOverlay(cursor.getShort(offset + 12) != 0);
        entity.setBitmaps(cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13));
    }

    @Override
    public PackageEntity readEntity(Cursor cursor, int offset) {
        PackageEntity entity = new PackageEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
            cursor.getInt(offset + 3), // versionCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // versionName
            cursor.getLong(offset + 5), // wifiRx
            cursor.getLong(offset + 6), // wifiTx
            cursor.getLong(offset + 7), // wifiTotal
            cursor.getLong(offset + 8), // mobileRx
            cursor.getLong(offset + 9), // mobileTx
            cursor.getLong(offset + 10), // mobileTotal
            cursor.getInt(offset + 11), // uid
            cursor.getShort(offset + 12) != 0, // overlay
            cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13) // bitmaps
        );
        return entity;
    }

    @Override
    protected final Long updateKeyAfterInsert(PackageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(PackageEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PackageEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity PackageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property VersionCode = new Property(3, int.class, "versionCode", false, "VERSION_CODE");
        public final static Property VersionName = new Property(4, String.class, "versionName", false, "VERSION_NAME");
        public final static Property WifiRx = new Property(5, long.class, "wifiRx", false, "WIFI_RX");
        public final static Property WifiTx = new Property(6, long.class, "wifiTx", false, "WIFI_TX");
        public final static Property WifiTotal = new Property(7, long.class, "wifiTotal", false, "WIFI_TOTAL");
        public final static Property MobileRx = new Property(8, long.class, "mobileRx", false, "MOBILE_RX");
        public final static Property MobileTx = new Property(9, long.class, "mobileTx", false, "MOBILE_TX");
        public final static Property MobileTotal = new Property(10, long.class, "mobileTotal", false, "MOBILE_TOTAL");
        public final static Property Uid = new Property(11, int.class, "uid", false, "UID");
        public final static Property Overlay = new Property(12, boolean.class, "overlay", false, "OVERLAY");
        public final static Property Bitmaps = new Property(13, byte[].class, "bitmaps", false, "BITMAPS");
    }

}
